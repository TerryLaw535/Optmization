library(CVXR)
b<-A[1,]^2+A[2,]^2
lambda2<-Variable(6)
objective<-Maximize(-quad_form(lambda2,t(A)%*%A)+t(b)%*%lambda2)
constraints<-list(sum(lambda2)==1,lambda2>=0)
prob<-Problem(objective,constraints)
soln<-solve(prob)
soln$status
r2=sqrt(soln$value)
x_opt2=A%*%soln$getValue(lambda2)
cat("The optimal sensor location calculated by CVXR is (",x_opt2[1],",",x_opt2[2],"), and the radius is",r2)
error_x_opt=x_opt-x_opt2
(error_x_opt=x_opt-x_opt2)
library(CVXR)
b<-A[1,]^2+A[2,]^2
lambda2<-Variable(6)
objective<-Maximize(-quad_form(lambda2,t(A)%*%A)+t(b)%*%lambda2)
constraints<-list(sum(lambda2)==1,lambda2>=0)
prob<-Problem(objective,constraints)
soln<-solve(prob)
soln$status
soln<-getvalue(lambda)
library(CVXR)
b<-A[1,]^2+A[2,]^2
lambda2<-Variable(6)
objective<-Maximize(-quad_form(lambda2,t(A)%*%A)+t(b)%*%lambda2)
constraints<-list(sum(lambda2)==1,lambda2>=0)
prob<-Problem(objective,constraints)
soln<-solve(prob)
soln$status
soln<-getvalue(lambda2)
library(CVXR)
b<-A[1,]^2+A[2,]^2
lambda2<-Variable(6)
objective<-Maximize(-quad_form(lambda2,t(A)%*%A)+t(b)%*%lambda2)
constraints<-list(sum(lambda2)==1,lambda2>=0)
prob<-Problem(objective,constraints)
soln<-solve(prob)
soln$status
soln<-getValue(lambda2)
library(CVXR)
b<-A[1,]^2+A[2,]^2
lambda2<-Variable(6)
objective<-Maximize(-quad_form(lambda2,t(A)%*%A)+t(b)%*%lambda2)
constraints<-list(sum(lambda2)==1,lambda2>=0)
prob<-Problem(objective,constraints)
soln<-solve(prob)
soln$status
soln$getValue(lambda2)
library(CVXR)
b<-A[1,]^2+A[2,]^2
lambda2<-Variable(6)
objective<-Maximize(-quad_form(lambda2,t(A)%*%A)+t(b)%*%lambda2)
constraints<-list(sum(lambda2)==1,lambda2>=0)
prob<-Problem(objective,constraints)
soln<-solve(prob)
soln$status
lambda2<-soln$getValue(lambda2)
(lambda2<-soln$getValue(lambda2))
lambda2<-soln$getValue(lambda2)
(lambda_cvxr<-soln$getValue(lambda2))
lambda2<-soln$getValue(lambda2)
library(CVXR)
b<-A[1,]^2+A[2,]^2
lambda2<-Variable(6)
objective<-Maximize(-quad_form(lambda2,t(A)%*%A)+t(b)%*%lambda2)
constraints<-list(sum(lambda2)==1,lambda2>=0)
prob<-Problem(objective,constraints)
soln<-solve(prob)
soln$status
lambda2<-soln$getValue(lambda2)
(lambda2<-soln$getValue(lambda2))
library(CVXR)
b<-A[1,]^2+A[2,]^2
lambda2<-Variable(6)
objective<-Maximize(-quad_form(lambda2,t(A)%*%A)+t(b)%*%lambda2)
constraints<-list(sum(lambda2)==1,lambda2>=0)
prob<-Problem(objective,constraints)
soln<-solve(prob)
soln$status
lambda2<-soln$getValue(lambda2)
lambda2<-soln$getValue(lambda2)
soln$getValue(lambda2)
r2=sqrt(soln$value)
x_opt2=A%*%soln$getValue(lambda2)
library(CVXR)
b<-A[1,]^2+A[2,]^2
lambda2<-Variable(6)
objective<-Maximize(-quad_form(lambda2,t(A)%*%A)+t(b)%*%lambda2)
constraints<-list(sum(lambda2)==1,lambda2>=0)
prob<-Problem(objective,constraints)
soln<-solve(prob)
soln$status
soln$getValue(lambda2)
r2=sqrt(soln$value)
x_opt2=A%*%soln$getValue(lambda2)
cat("The optimal sensor location calculated by CVXR is (",x_opt2[1],",",x_opt2[2],"), and the radius is",r2)
soln$getValue(lambda2)
lambda2
soln$getValue(lambda2)
error_lambda=lambda-soln$getValue(lambda2)
(error_lambda=lambda-soln$getValue(lambda2))
lambda0=c(1,0,0,0,0,0)
out1<-proj_graddesc(g,proj,lambda0,tbar=1/L,epsilon=10^-10)
(lambda=out1$x.opt)
A=matrix(c(1,-4,-1,2,-3,5,-4,-3,5,2,2,-2),nr=2)
f<-function(lambda){
-sum((A%*%lambda)^2)+lambda%*%(A[1,]^2+A[2,]^2)
}
g<-function(lambda){
-2*t(A)%*%A%*%lambda+(A[1,]^2+A[2,]^2)
}
g(c(1.23,2.34,3.45,4.56,5.67,6.78))
proj_graddesc<-function(g,proj,x0,tbar,epsilon,maxiter=10^4){
# Gradient method with constant stepsize. The method
# terminates when ||g(x)|| <epsilon
# INPUT
# g - gradient of the objective function
# projection operator
# x0 - initial point
# tbar  -  constant stepsize
# epsilon - tolerance parameter
# maxiter - the maximum number of iterations
####
# OUTPUT
# x.opt = optimal solution (up to a tolerance) of min f(x) # f.opt = optimal function value
####
stopifnot(min(x0)>=0,sum(x0)==1) # check the initial point is feasible.
x=x0
iter=1
trajectory <- matrix(0, nr=maxiter, nc=length(x0))
trajectory[1,]<-x
error <- 100
while (error > epsilon && iter<maxiter){
iter=iter+1
grad=g(x)
xnew=proj(x+tbar*grad)
trajectory[iter,]<-xnew
error = sqrt(sum((x-xnew)^2))
x=xnew
}
return(list(x.opt=x, trajectory=trajectory[1:iter,], iter=iter-1))
}
lambda0=c(1,0,0,0,0,0)
out1<-proj_graddesc(g,proj,lambda0,tbar=1/L,epsilon=10^-10)
(lambda=out1$x.opt)
proj_graddesc<-function(g,proj,x0,tbar,epsilon,maxiter=10^8){
# Gradient method with constant stepsize. The method
# terminates when ||g(x)|| <epsilon
# INPUT
# g - gradient of the objective function
# projection operator
# x0 - initial point
# tbar  -  constant stepsize
# epsilon - tolerance parameter
# maxiter - the maximum number of iterations
####
# OUTPUT
# x.opt = optimal solution (up to a tolerance) of min f(x) # f.opt = optimal function value
####
stopifnot(min(x0)>=0,sum(x0)==1) # check the initial point is feasible.
x=x0
iter=1
trajectory <- matrix(0, nr=maxiter, nc=length(x0))
trajectory[1,]<-x
error <- 100
while (error > epsilon && iter<maxiter){
iter=iter+1
grad=g(x)
xnew=proj(x+tbar*grad)
trajectory[iter,]<-xnew
error = sqrt(sum((x-xnew)^2))
x=xnew
}
return(list(x.opt=x, trajectory=trajectory[1:iter,], iter=iter-1))
}
lambda0=c(1,0,0,0,0,0)
out1<-proj_graddesc(g,proj,lambda0,tbar=1/L,epsilon=10^-10)
(lambda=out1$x.opt)
proj_graddesc<-function(g,proj,x0,tbar,epsilon,maxiter=10^4){
# Gradient method with constant stepsize. The method
# terminates when ||g(x)|| <epsilon
# INPUT
# g - gradient of the objective function
# projection operator
# x0 - initial point
# tbar  -  constant stepsize
# epsilon - tolerance parameter
# maxiter - the maximum number of iterations
####
# OUTPUT
# x.opt = optimal solution (up to a tolerance) of min f(x) # f.opt = optimal function value
####
stopifnot(min(x0)>=0,sum(x0)==1) # check the initial point is feasible.
x=x0
iter=1
trajectory <- matrix(0, nr=maxiter, nc=length(x0))
trajectory[1,]<-x
error <- 100
while (error > epsilon && iter<maxiter){
iter=iter+1
grad=g(x)
xnew=proj(x+tbar*grad)
trajectory[iter,]<-xnew
error = sqrt(sum((x-xnew)^2))
x=xnew
}
return(list(x.opt=x, trajectory=trajectory[1:iter,], iter=iter-1))
}
A=matrix(c(1,-4,-1,2,-3,5,-4,-3,5,2,2,-2),nr=2)
f<-function(lambda){
-sum((A%*%lambda)^2)+lambda%*%(A[1,]^2+A[2,]^2)
}
g<-function(lambda){
-2*t(A)%*%A%*%lambda+(A[1,]^2+A[2,]^2)
}
g(c(1.23,2.34,3.45,4.56,5.67,6.78))
library(numDeriv)
numDeriv::grad(f,c(1.23,2.34,3.45,4.56,5.67,6.78))
lambda0=c(1,0,0,0,0,0)
out1<-proj_graddesc(g,proj,lambda0,tbar=1/L,epsilon=10^-10)
(lambda=out1$x.opt)
(error_lambda=lambda-soln$getValue(lambda2))
(error_lambda=lambda-soln$getValue(lambda2))
lambda0=c(1,0,0,0,0,0)
out1<-proj_graddesc(g,proj,lambda0,tbar=1/L,epsilon=10^-8)
(lambda=out1$x.opt)
(error_lambda=lambda-soln$getValue(lambda2))
lambda0=c(1,0,0,0,0,0)
out1<-proj_graddesc(g,proj,lambda0,tbar=1/L,epsilon=10^-10)
(lambda=out1$x.opt)
(x_opt=A%*%lambda)
(error_lambda=lambda-soln$getValue(lambda2))
(error_lambda=lambda-soln$getValue(lambda2))
plot(A[1,],A[2,],col="blue",xlab='x',ylab='y',xlim=c(-5,5),ylim=c(-6,6),asp = 1)
par(new=TRUE)
r=sqrt(f(lambda))
library(plotrix)
plot(x_opt[1],x_opt[2],col="red",xlab='x',ylab='y',xlim=c(-5,5),ylim=c(-6,6),asp=1)
draw.circle(x_opt[1],x_opt[2],r)
cat("The optimal sensor location is (",x_opt[1],",",x_opt[2],"), and the radius is",r)
y=c(-1,1,0.3)
lb=min(y)-2/length(y)
up=max(y)
miu=bisection(g_grad,y,lb,up,1e-8)
x_star=c()
for(i in 1:length(y)){
x_star[i]=max(y[i]-miu,0)
}
cat("The projection of (",y,") is (",x_star,")")
plot(A[1,],A[2,],col="blue",xlab='x',ylab='y',xlim=c(-5,5),ylim=c(-6,6),asp = 1)
par(new=TRUE)
r=sqrt(f(lambda))
library(plotrix)
plot(x_opt[1],x_opt[2],col="red",xlab='x',ylab='y',xlim=c(-5,5),ylim=c(-6,6),asp=1)
draw.circle(x_opt[1],x_opt[2],r)
cat("The optimal sensor location is (",x_opt[1],",",x_opt[2],"), and the radius is",r)
proj(y)
y=c(-1,1,0.3)
proj<-function(x){
lb=min(x)-2/length(x)
up=max(x)
miu=bisection(g_grad,x,lb,ub,1e-8)
x_new=c()
for(i in 1:length(x)){
x_new[i]=max(x[i]-miu,0)
}
return(x_new)
}
y_new=proj(y)
y=c(-1,1,0.3)
proj<-function(x){
lb=min(x)-2/length(x)
ub=max(x)
miu=bisection(g_grad,x,lb,ub,1e-8)
x_new=c()
for(i in 1:length(x)){
x_new[i]=max(x[i]-miu,0)
}
return(x_new)
}
y_proj=proj(y)
cat("The projection of (",y,") is (",y_proj,")")
proj_graddesc<-function(g,proj,x0,tbar,epsilon,maxiter=10^4){
# Gradient method with constant stepsize. The method
# terminates when ||g(x)|| <epsilon
# INPUT
# g - gradient of the objective function
# projection operator
# x0 - initial point
# tbar  -  constant stepsize
# epsilon - tolerance parameter
# maxiter - the maximum number of iterations
####
# OUTPUT
# x.opt = optimal solution (up to a tolerance) of min f(x) # f.opt = optimal function value
####
stopifnot(min(x0)>=0,sum(x0)==1) # check the initial point is feasible.
x=x0
iter=1
trajectory <- matrix(0, nr=maxiter, nc=length(x0))
trajectory[1,]<-x
error <- 100
while (error > epsilon && iter<maxiter){
iter=iter+1
grad=g(x)
xnew=proj(x+tbar*grad)
trajectory[iter,]<-xnew
error = sqrt(sum((x-xnew)^2))
x=xnew
}
return(list(x.opt=x, trajectory=trajectory[1:iter,], iter=iter-1))
}
A=matrix(c(1,-4,-1,2,-3,5,-4,-3,5,2,2,-2),nr=2)
f<-function(lambda){
-sum((A%*%lambda)^2)+lambda%*%(A[1,]^2+A[2,]^2)
}
g<-function(lambda){
-2*t(A)%*%A%*%lambda+(A[1,]^2+A[2,]^2)
}
g(c(1.23,2.34,3.45,4.56,5.67,6.78))
lambda0=c(1,0,0,0,0,0)
out1<-proj_graddesc(g,proj,lambda0,tbar=1/L,epsilon=10^-10)
(lambda=out1$x.opt)
y=c(-1,1,0.3)
proj<-function(x){
lb=min(x)-2/length(x)
ub=max(x)
miu=bisection(g_grad,x,lb,ub,1e-8)
x_proj=c()
for(i in 1:length(x)){
x_proj[i]=max(x[i]-miu,0)
}
return(x_proj)
}
y_proj=proj(y)
cat("The projection of (",y,") is (",y_proj,")")
plot(A[1,],A[2,],col="blue",xlab='x',ylab='y',xlim=c(-5,5),ylim=c(-6,6),asp = 1)
par(new=TRUE)
r=sqrt(f(lambda))
library(plotrix)
plot(x_opt[1],x_opt[2],col="red",xlab='x',ylab='y',xlim=c(-5,5),ylim=c(-6,6),asp=1)
draw.circle(x_opt[1],x_opt[2],r)
cat("The optimal sensor location is (",x_opt[1],",",x_opt[2],"), and the radius is",r)
library(CVXR)
b<-A[1,]^2+A[2,]^2
lambda2<-Variable(6)
objective<-Maximize(-quad_form(lambda2,t(A)%*%A)+t(b)%*%lambda2)
constraints<-list(sum(lambda2)==1,lambda2>=0)
prob<-Problem(objective,constraints)
soln<-solve(prob)
soln$status
soln$getValue(lambda2)
r2=sqrt(soln$value)
x_opt2=A%*%soln$getValue(lambda2)
cat("The optimal sensor location calculated by CVXR is (",x_opt2[1],",",x_opt2[2],"), and the radius is",r2)
(error_lambda=lambda-soln$getValue(lambda2))
(error_lambda=abs(lambda-soln$getValue(lambda2)))
(error_x_opt=abs(x_opt-x_opt2))
r2=sqrt(soln$value)
x_opt2=A%*%soln$getValue(lambda2)
cat("The optimal sensor location calculated by CVXR is (",x_opt2[1],"),(",x_opt2[2],")",
"/n"," and the radius is",r2)
r2=sqrt(soln$value)
x_opt2=A%*%soln$getValue(lambda2)
cat("The optimal sensor location calculated by CVXR is (",x_opt2[1],"),(",x_opt2[2],")",
"\n"," and the radius is",r2)
r2=sqrt(soln$value)
x_opt2=A%*%soln$getValue(lambda2)
cat("The optimal sensor location calculated by CVXR is (",x_opt2[1],"),(",x_opt2[2],")",
"\n","and the radius is",r2)
r2=sqrt(soln$value)
x_opt2=A%*%soln$getValue(lambda2)
cat("The optimal sensor location calculated by CVXR is (",x_opt2[1],",",x_opt2[2],")",
"\n","and the radius is",r2)
setwd("~/Desktop/OPT_CW")
library(CVXR)
y<-variable(3)#Here y=(x1,x2,gamma)
library(CVXR)
y<-Variable(3)#Here y=(x1,x2,gamma)
A<-c(0,0,1)
objective<-Minimize(t(A)%*%y)
constraints<-list((y[1]-A[1,])^2+(y[2]-A[2,])^2-y[3]<=0)
g_grad<-function(miu,y){
sum=0
for(i in 1:length(y)){
sum=sum+max(y[i]-miu,0)
}
grad=sum-1
return(grad)
}
bisection<-function(g_grad,y,lb,ub,eps){
#Input:
#g_grad-the scalar function which is the gradient of g(miu)
#y-the point that we want to find the projection
#lb-the initial lower bound
#ub-the initial upper bound
#eps-tolerance parameter
#Output:
#z-a root of g_grad(miu,y)=0
stopifnot(g_grad(lb,y)*g_grad(ub,y)<0,lb<ub)
iter=0
while(ub-lb>eps){
z=(lb+ub)/2
iter=iter+1
if(g_grad(lb,y)*g_grad(z,y)>0){
lb=z
}else{
ub=z
}
}
return(z)
}
y=c(-1,1,0.3)
proj<-function(x){
lb=min(x)-2/length(x)
ub=max(x)
miu=bisection(g_grad,x,lb,ub,1e-8)
x_proj=c()
for(i in 1:length(x)){
x_proj[i]=max(x[i]-miu,0)
}
return(x_proj)
}
y_proj=proj(y)
cat("The projection of (",y,") is (",y_proj,")")
proj_graddesc<-function(g,proj,x0,tbar,epsilon,maxiter=10^4){
# Gradient method with constant stepsize. The method
# terminates when ||g(x)|| <epsilon
# INPUT
# g - gradient of the objective function
# projection operator
# x0 - initial point
# tbar  -  constant stepsize
# epsilon - tolerance parameter
# maxiter - the maximum number of iterations
####
# OUTPUT
# x.opt = optimal solution (up to a tolerance) of min f(x) # f.opt = optimal function value
####
stopifnot(min(x0)>=0,sum(x0)==1) # check the initial point is feasible.
x=x0
iter=1
trajectory <- matrix(0, nr=maxiter, nc=length(x0))
trajectory[1,]<-x
error <- 100
while (error > epsilon && iter<maxiter){
iter=iter+1
grad=g(x)
xnew=proj(x+tbar*grad)
trajectory[iter,]<-xnew
error = sqrt(sum((x-xnew)^2))
x=xnew
}
return(list(x.opt=x, trajectory=trajectory[1:iter,], iter=iter-1))
}
A=matrix(c(1,-4,-1,2,-3,5,-4,-3,5,2,2,-2),nr=2)
f<-function(lambda){
-sum((A%*%lambda)^2)+lambda%*%(A[1,]^2+A[2,]^2)
}
g<-function(lambda){
-2*t(A)%*%A%*%lambda+(A[1,]^2+A[2,]^2)
}
g(c(1.23,2.34,3.45,4.56,5.67,6.78))
library(numDeriv)
numDeriv::grad(f,c(1.23,2.34,3.45,4.56,5.67,6.78))
library(Matrix)
Matrix::norm(2*t(A)%*%A,type='2')
(L=eigen(t(A)%*%A)$values[1]*2)
lambda0=c(1,0,0,0,0,0)
out1<-proj_graddesc(g,proj,lambda0,tbar=1/L,epsilon=10^-10)
(lambda=out1$x.opt)
(x_opt=A%*%lambda)
plot(A[1,],A[2,],col="blue",xlab='x',ylab='y',xlim=c(-5,5),ylim=c(-6,6),asp = 1)
par(new=TRUE)
r=sqrt(f(lambda))
library(plotrix)
plot(x_opt[1],x_opt[2],col="red",xlab='x',ylab='y',xlim=c(-5,5),ylim=c(-6,6),asp=1)
draw.circle(x_opt[1],x_opt[2],r)
cat("The optimal sensor location is (",x_opt[1],",",x_opt[2],"), and the radius is",r)
library(CVXR)
y<-Variable(3)#Here y=(x1,x2,gamma)
C<-c(0,0,1)
objective<-Minimize(t(C)%*%y)
constraints<-list((y[1]-A[1,])^2+(y[2]-A[2,])^2-y[3]<=0)
prob<-Problem(objective,constraints)
soln<-solve(prob)
soln$getValue(y)
library(CVXR)
y<-Variable(3)#Here y=(x1,x2,gamma)
C<-c(0,0,1)
objective<-Minimize(t(C)%*%y)
constraints<-list((y[1]-A[1,])^2+(y[2]-A[2,])^2-y[3]<=0)
prob<-Problem(objective,constraints)
soln<-solve(prob)
soln$status
soln$getValue(y)
library(CVXR)
y<-Variable(3)#Here y=(x1,x2,gamma)
C<-c(0,0,1)
objective<-Minimize(t(C)%*%y)
constraints<-list((y[1]-A[1,])^2+(y[2]-A[2,])^2-y[3]<=0)
prob<-Problem(objective,constraints)
soln<-solve(prob)
soln$status
(y_opt=soln$getValue(y))
r2=sqrt(y_opt[3])
x_opt2=y_opt[1:2]
cat("The optimal sensor location calculated by CVXR is (",x_opt2[1],",",x_opt2[2],")",
"\n","and the radius is",r2)
(error_x_opt=abs(x_opt-x_opt2))
(error_r=abs(r-r2))
